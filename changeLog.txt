Version 0.7.2: February 9, 2015

- Support for Nerijus' 6 questions about accessibility rules for types that a tool should present to a user.
  (the accessibility rules in OTI are a restricted clarification of the UML 2.5 Namespace import / visibility rules)
   
Version 0.7.1: February 9, 2015

- Clarification about the semantics of UML package importation rules:
  See UMLNamespaceOps.{visibleMembers, allVisibleMembers}
   
- Instead of fancy "// [protected ...]" and "// [/protected]" markers to protect regions from code generation,
  use different traits to separate generated code that has no protected regions (e.g., UMLElement.scala, UMLNamespace.scala, UMLPackage.scala) 
  vs. non-generated code that has no generated regions (e.g., UMLElementOps.scala, UMLNamespaceOps.scala, UMLPackageOps.scala)
  
Version 0.7.0: February 8, 2015

- trampolined-serializer
- TIWG-restrictions on Canonical XMI ordering & identification
- serialize applied stereotype instances

Version 0.6.4: February 2, 2015

.classpath

Version 0.6.3: February 2, 2015

Update for applied stereotype tag/values

Version 0.6.2: February 2, 2015

Fixes for problems (1) and (2) in 0.6.1

Version 0.6.1: February 2, 2015

- working reflective serializer

Known problems: 

1) some attributes are serialized in the wrong order

wrong:

    <association xmi:id="_QUDV_-A_unitFactor_unit" xmi:uuid="2e341130-f070-48ea-8629-2f82acb02663" xmi:type="uml:Association" name="A_unitFactor_unit">
      <property 
        association="_QUDV_-A_unitFactor_unit" 
        type="_QUDV_-UnitFactor" 
        xmi:id="_QUDV_-A_unitFactor_unit-unitFactor" 
        xmi:uuid="29811f55-8faa-4a5d-a993-16ac89abdae5" 
        xmi:type="uml:Property" 
        name="unitFactor" 
        isOrdered="false" 
        isUnique="true">
      </property>
    </association>

should be:


    <association xmi:id="_QUDV_-A_unitFactor_unit" xmi:uuid="2e341130-f070-48ea-8629-2f82acb02663" xmi:type="uml:Association" name="A_unitFactor_unit">
      <property 
        xmi:id="_QUDV_-A_unitFactor_unit-unitFactor" 
        xmi:uuid="29811f55-8faa-4a5d-a993-16ac89abdae5" 
        xmi:type="uml:Property" 
        name="unitFactor" 
        isOrdered="false" 
        isUnique="true" 
        type="_QUDV_-UnitFactor" 
        association="_QUDV_-A_unitFactor_unit">
      </property>
    </association>

2) the composite & reference MetaProperties have duplicates

UMLProperty:

  def property_referenceMetaProperties: MetaPropertyFunctions =
    connectableElement_referenceMetaProperties ++
    structuralFeature_referenceMetaProperties ++ ...
    
UMLConnectableElement:

  def connectableElement_referenceMetaProperties: MetaPropertyFunctions =
    typedElement_referenceMetaProperties

UMLStructuralFeature:

  def structuralFeature_referenceMetaProperties: MetaPropertyFunctions =
    feature_referenceMetaProperties ++
      multiplicityElement_referenceMetaProperties ++
      typedElement_referenceMetaProperties    

This results in duplicates in the serialization, e.g.:
    
</association>
    <dataType xmi:id="_QUDV_-Rational" xmi:uuid="4e8b9de6-4171-4b2f-899f-5d04bda414fe" xmi:type="uml:DataType" name="Rational">
      <property xmi:id="_QUDV_-Rational-numerator" xmi:uuid="c5132f22-3167-49a7-83eb-16d58020e1ab" xmi:type="uml:Property" name="numerator" isOrdered="false" isUnique="true">
        <type href="http://www.omg.org/spec/SysML/20150301/SysML#_SysML_-Libraries-PrimitiveValueTypes-Integer"></type>
        <type href="http://www.omg.org/spec/SysML/20150301/SysML#_SysML_-Libraries-PrimitiveValueTypes-Integer"></type>
      </property>
      ...
          
Version 0.6.0: February 1, 2015

- reflective serializer (DocumentSet)

Version 0.5.2: January 31, 2015

- meta attributes

Version 0.5.1: January 31, 2015

- Naming convention subtleties

Element.mofMetaclass
Extension.metaclass

Profile.profileApplications_appliedProfile
Package.appliedProfile

Property.association_navigableOwnedEnd
Property.association_memberEnd

Version 0.5.0: January 31, 2015

- naming convention for names of association member end properties:

-- singular if multiplicity is 0..1 or 1; plural otherwise
-- for the name of an opposite association member end property (regardless of navigability):
--- use the (opposite association member end) property name (if unambiguous)
--- use the property name suffixed with "_<opposite member end property type name>" (if unambiguous)
--- use the property name suffixed with "_<opposite member end property name>" (if unambiguous)
--- use the property name suffixed with "_<opposite member end property type name>_<opposite member end property name>" (if unambiguous)

- add support for serializing non-derived composite & reference properties
-- UMLElement.{composite,reference}MetaProperties
-- every metaclass defines: <metaclass name>_{composite,reference}MetaProperties to include the superclasses' meta-properties before the metaclass' properties
   (see OMG Canonical XMI ordering rules)
-- every concrete metaclass defines:

override def {composite,reference}MetaProperties: MetaPropertyFunctions = <metaclass name>_{composite,reference}MetaProperties

- added several data attributes

Version 0.4: January 29, 2015

- OTI::SpecificationRoot::packageURI
- OTI::ID
- OTI::ID::uuid
- Cannonical XMI DocmentSet writer

Version 0.3: January 29, 2015

- Added UMLModel
- forwardReferencesFromMetamodelAssociations

Align the criteria used to the OMG MOF/XMI spec, that is
directed, non-composite, non-derived properties

- simplified the canonicalXMI.Document/DocumentSet model

Simplification allows decoupling the modeling of Documents from 
the analysis of element-level and document-level cross-references

Version 0.2: January 29, 2015

Add support for calculating the forward references from an Element.

This is needed to serialize OTI models into OMG Canonical XMI documents since the serialization of a local element reference
is different from that of an external element reference (see "Linking" in the OMG MOF/XMI spec)

Version 0.1: January 28, 2015

Added SBT configuration.
Added org.omg.oti.canonicalXMI based on TIWG teleconference call discussions to avoid having to write tool-specific => tool-infrastructure save converters (XSL, ...)
